// ========================================
// SCRIPT PRINCIPAL - ESTOCA.AI
// ========================================

class EstocaAI {
    constructor() {
        this.currentTheme = 'light';
        this.isSidebarCollapsed = false;
        this.notifications = [];
        this.currentSection = 'dashboard';
        
        this.initialize();
    }

    initialize() {
        this.setupTheme();
        this.setupEventListeners();
        this.updateDateTime();
        this.setupNotifications();
        this.initializeChat();
        this.setupUserMenu();
        this.loadUserData();
        
        // Atualizar data/hora a cada segundo
        setInterval(() => this.updateDateTime(), 1000);
        
        console.log('üöÄ Estoca.AI inicializado com sucesso!');
    }

    setupTheme() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        this.setTheme(savedTheme);
        
        const themeToggle = document.getElementById('themeToggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => {
                this.toggleTheme();
            });
        }
    }

    setTheme(theme) {
        this.currentTheme = theme;
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
        
        const themeIcon = document.getElementById('themeIcon');
        const themeText = document.querySelector('.theme-text');
        
        if (themeIcon) {
            themeIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
        }
        
        if (themeText) {
            themeText.textContent = theme === 'dark' ? 'Claro' : 'Escuro';
        }
    }

    toggleTheme() {
        const newTheme = this.currentTheme === 'light' ? 'dark' : 'light';
        this.setTheme(newTheme);
        this.showNotification(`Tema alterado para ${newTheme === 'dark' ? 'escuro' : 'claro'}`, 'info');
    }

    setupEventListeners() {
        // Menu mobile
        const mobileMenuBtn = document.getElementById('mobileMenuBtn');
        if (mobileMenuBtn) {
            mobileMenuBtn.addEventListener('click', () => {
                this.toggleSidebar();
            });
        }

        // Navega√ß√£o
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                this.handleNavigation(e.target.closest('.nav-item'));
            });
        });

        // Busca
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.handleSearch(e.target.value);
            });
        }

        // Notifica√ß√µes
        const notificationBtn = document.getElementById('notificationBtn');
        if (notificationBtn) {
            notificationBtn.addEventListener('click', () => {
                this.toggleNotifications();
            });
        }

        // Bot√µes de a√ß√£o r√°pida
        document.querySelectorAll('.quick-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.handleQuickAction(e.target);
            });
        });

        // Menu do usu√°rio
        const userMenuBtn = document.getElementById('userMenuBtn');
        if (userMenuBtn) {
            userMenuBtn.addEventListener('click', () => {
                this.toggleUserMenu();
            });
        }

        // Logout
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => {
                this.handleLogout();
            });
        }

        // Fechar menu do usu√°rio ao clicar fora
        document.addEventListener('click', (e) => {
            const userMenu = document.getElementById('userMenu');
            const userMenuBtn = document.getElementById('userMenuBtn');
            
            if (userMenu && userMenuBtn && !userMenu.contains(e.target) && !userMenuBtn.contains(e.target)) {
                this.closeUserMenu();
            }
        });

        // Controles de gr√°ficos
        document.querySelectorAll('.chart-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.handleChartPeriod(e.target);
            });
        });

        // A√ß√µes de gr√°ficos
        document.querySelectorAll('.chart-action-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.handleChartAction(e.target);
            });
        });
    }

    handleNavigation(navItem) {
        if (!navItem || navItem.classList.contains('construction')) return;

        // Remover classe active de todos os itens
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });

        // Adicionar classe active ao item clicado
        navItem.classList.add('active');

        // Atualizar t√≠tulo e descri√ß√£o da p√°gina
        const section = navItem.dataset.section;
        this.updatePageInfo(section);
        this.currentSection = section;

        // Mostrar notifica√ß√£o
        const sectionName = navItem.querySelector('span').textContent;
        this.showNotification(`Navegando para ${sectionName}`, 'info');
    }

    updatePageInfo(section) {
        const pageTitle = document.getElementById('pageTitle');
        const pageDescription = document.getElementById('pageDescription');

        const pageInfo = {
            dashboard: {
                title: 'Dashboard de Vendas',
                description: 'Monitoramento em tempo real das vendas e estoque'
            },
            sales: {
                title: 'Gest√£o de Vendas',
                description: 'Controle completo de vendas e pedidos'
            },
            inventory: {
                title: 'Controle de Estoque',
                description: 'Gest√£o inteligente do invent√°rio'
            },
            customers: {
                title: 'Gest√£o de Clientes',
                description: 'Cadastro e relacionamento com clientes'
            },
            reports: {
                title: 'Relat√≥rios',
                description: 'An√°lises e relat√≥rios detalhados'
            },
            analytics: {
                title: 'An√°lise de Dados',
                description: 'Insights e m√©tricas avan√ßadas'
            },
            settings: {
                title: 'Configura√ß√µes',
                description: 'Personalize seu sistema'
            },
            profile: {
                title: 'Perfil do Usu√°rio',
                description: 'Gerencie suas informa√ß√µes'
            }
        };

        const info = pageInfo[section] || pageInfo.dashboard;
        
        if (pageTitle) pageTitle.textContent = info.title;
        if (pageDescription) pageDescription.textContent = info.description;
    }

    handleSearch(query) {
        if (query.length < 2) return;

        // Simular busca
        const results = this.performSearch(query);
        this.showSearchResults(results);
    }

    performSearch(query) {
        // Simular resultados de busca
        const searchData = [
            { type: 'product', name: 'Smartphone XYZ', category: 'Eletr√¥nicos' },
            { type: 'customer', name: 'Jo√£o Silva', category: 'Clientes' },
            { type: 'order', name: 'Pedido #12345', category: 'Vendas' },
            { type: 'report', name: 'Relat√≥rio de Vendas', category: 'Relat√≥rios' }
        ];

        return searchData.filter(item => 
            item.name.toLowerCase().includes(query.toLowerCase()) ||
            item.category.toLowerCase().includes(query.toLowerCase())
        );
    }

    showSearchResults(results) {
        // Implementar exibi√ß√£o de resultados de busca
        console.log('Resultados da busca:', results);
    }

    handleQuickAction(button) {
        const action = button.textContent.trim();
        this.showNotification(`A√ß√£o executada: ${action}`, 'success');
    }

    handleChartPeriod(button) {
        // Remover classe active de todos os bot√µes
        document.querySelectorAll('.chart-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // Adicionar classe active ao bot√£o clicado
        button.classList.add('active');

        // Atualizar gr√°ficos (ser√° feito pelo ChartsAndReports)
        const period = button.dataset.period;
        if (window.chartsAndReports) {
            window.chartsAndReports.updateChartsByPeriod(period);
        }
    }

    handleChartAction(button) {
        const action = button.title.toLowerCase();
        
        if (action.includes('atualizar')) {
            if (window.chartsAndReports) {
                window.chartsAndReports.updateCharts();
            }
            this.showNotification('Dados atualizados com sucesso!', 'success');
        } else if (action.includes('exportar')) {
            if (window.chartsAndReports) {
                window.chartsAndReports.exportChart();
            }
        }
    }

    toggleSidebar() {
        const sidebar = document.querySelector('.sidebar');
        const mainContent = document.querySelector('.main-content');
        
        if (this.isSidebarCollapsed) {
            sidebar.style.transform = 'translateX(0)';
            mainContent.style.marginLeft = '280px';
            this.isSidebarCollapsed = false;
        } else {
            sidebar.style.transform = 'translateX(-100%)';
            mainContent.style.marginLeft = '0';
            this.isSidebarCollapsed = true;
        }
    }

    updateDateTime() {
        const now = new Date();
        const dateTimeElement = document.getElementById('currentDateTime');
        
        if (dateTimeElement) {
            const formattedDateTime = now.toLocaleString('pt-BR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            dateTimeElement.textContent = formattedDateTime;
        }
    }

    setupNotifications() {
        // Simular notifica√ß√µes iniciais
        this.addNotification('Sistema iniciado com sucesso', 'success');
        this.addNotification('3 produtos com estoque baixo', 'warning');
        this.addNotification('Nova atualiza√ß√£o dispon√≠vel', 'info');
        
        this.updateNotificationCount();
    }

    addNotification(message, type = 'info') {
        const notification = {
            id: Date.now(),
            message,
            type,
            timestamp: new Date(),
            read: false
        };
        
        this.notifications.unshift(notification);
        this.updateNotificationCount();
    }

    updateNotificationCount() {
        const unreadCount = this.notifications.filter(n => !n.read).length;
        const countElement = document.getElementById('notificationCount');
        
        if (countElement) {
            countElement.textContent = unreadCount;
            countElement.style.display = unreadCount > 0 ? 'block' : 'none';
        }
    }

    toggleNotifications() {
        // Implementar painel de notifica√ß√µes
        this.showNotification('Painel de notifica√ß√µes em desenvolvimento', 'info');
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-${this.getNotificationIcon(type)}"></i>
                <span>${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" style="margin-left: auto; background: none; border: none; color: inherit; cursor: pointer;">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;

        const container = document.getElementById('notificationsContainer');
        if (container) {
            container.appendChild(notification);
            
            // Mostrar notifica√ß√£o
            setTimeout(() => {
                notification.classList.add('show');
            }, 100);

            // Remover notifica√ß√£o ap√≥s 5 segundos
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    if (container.contains(notification)) {
                        container.removeChild(notification);
                    }
                }, 300);
            }, 5000);
        }
    }

    getNotificationIcon(type) {
        const icons = {
            success: 'check-circle',
            error: 'exclamation-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };
        return icons[type] || 'info-circle';
    }

    initializeChat() {
        // O chat ser√° inicializado pelo EstocaAIChat
        setTimeout(() => {
            if (window.estocaAIChat) {
                console.log('Chat IA inicializado');
            }
        }, 1000);
    }

    // M√©todos para funcionalidades avan√ßadas
    exportData(type) {
        const data = this.generateExportData(type);
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `estoca-ai-${type}-${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        this.showNotification(`Dados exportados: ${type}`, 'success');
    }

    generateExportData(type) {
        const baseData = {
            exportDate: new Date().toISOString(),
            systemVersion: '2.0.0',
            user: 'Administrador'
        };

        switch (type) {
            case 'sales':
                return {
                    ...baseData,
                    type: 'sales',
                    data: this.generateSalesData()
                };
            case 'inventory':
                return {
                    ...baseData,
                    type: 'inventory',
                    data: this.generateInventoryData()
                };
            case 'customers':
                return {
                    ...baseData,
                    type: 'customers',
                    data: this.generateCustomersData()
                };
            default:
                return baseData;
        }
    }

    generateSalesData() {
        return {
            totalSales: 45230.50,
            productsSold: 1247,
            averageTicket: 36.27,
            period: 'today',
            transactions: [
                { id: 1, product: 'Smartphone XYZ', quantity: 2, value: 1800.00 },
                { id: 2, product: 'Fone Bluetooth', quantity: 5, value: 450.00 }
            ]
        };
    }

    generateInventoryData() {
        return {
            totalProducts: 2847,
            inStock: 2500,
            lowStock: 23,
            outOfStock: 5,
            totalValue: 1247890.50
        };
    }

    generateCustomersData() {
        return {
            totalCustomers: 1250,
            activeCustomers: 890,
            newCustomers: 45,
            averageOrderValue: 156.78
        };
    }

    // M√©todos para an√°lise de dados
    generateInsights() {
        const insights = [
            {
                type: 'sales',
                title: 'Crescimento de Vendas',
                description: 'Vendas aumentaram 12.4% em rela√ß√£o ao per√≠odo anterior',
                value: '+12.4%',
                trend: 'up'
            },
            {
                type: 'inventory',
                title: 'Estoque Otimizado',
                description: '89% dos produtos em n√≠vel adequado',
                value: '89%',
                trend: 'stable'
            },
            {
                type: 'customers',
                title: 'Novos Clientes',
                description: '45 novos clientes este m√™s',
                value: '+45',
                trend: 'up'
            }
        ];

        return insights;
    }

    // M√©todos para configura√ß√µes
    saveSettings(settings) {
        localStorage.setItem('estocaAISettings', JSON.stringify(settings));
        this.showNotification('Configura√ß√µes salvas com sucesso', 'success');
    }

    loadSettings() {
        const saved = localStorage.getItem('estocaAISettings');
        return saved ? JSON.parse(saved) : this.getDefaultSettings();
    }

    getDefaultSettings() {
        return {
            theme: 'light',
            autoRefresh: true,
            notifications: true,
            language: 'pt-BR',
            currency: 'BRL',
            timezone: 'America/Sao_Paulo'
        };
    }

    // M√©todos para backup e restaura√ß√£o
    createBackup() {
        const backup = {
            timestamp: new Date().toISOString(),
            version: '2.0.0',
            data: {
                settings: this.loadSettings(),
                theme: this.currentTheme,
                notifications: this.notifications
            }
        };

        const blob = new Blob([JSON.stringify(backup, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `estoca-ai-backup-${new Date().toISOString().split('T')[0]}.json`;
        a.click();
        URL.revokeObjectURL(url);

        this.showNotification('Backup criado com sucesso', 'success');
    }

    restoreBackup(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const backup = JSON.parse(e.target.result);
                this.applyBackup(backup);
                this.showNotification('Backup restaurado com sucesso', 'success');
            } catch (error) {
                this.showNotification('Erro ao restaurar backup', 'error');
            }
        };
        reader.readAsText(file);
    }

    applyBackup(backup) {
        if (backup.data.settings) {
            this.saveSettings(backup.data.settings);
        }
        if (backup.data.theme) {
            this.setTheme(backup.data.theme);
        }
        if (backup.data.notifications) {
            this.notifications = backup.data.notifications;
            this.updateNotificationCount();
        }
    }

    // ========================================
    // GERENCIAMENTO DO USU√ÅRIO
    // ========================================

    setupUserMenu() {
        // Menu j√° configurado no setupEventListeners
    }

    toggleUserMenu() {
        const userMenu = document.getElementById('userMenu');
        if (userMenu) {
            const isVisible = userMenu.style.display !== 'none';
            if (isVisible) {
                this.closeUserMenu();
            } else {
                this.openUserMenu();
            }
        }
    }

    openUserMenu() {
        const userMenu = document.getElementById('userMenu');
        if (userMenu) {
            userMenu.style.display = 'block';
            userMenu.style.animation = 'slideUp 0.3s ease-out';
        }
    }

    closeUserMenu() {
        const userMenu = document.getElementById('userMenu');
        if (userMenu) {
            userMenu.style.display = 'none';
        }
    }

    loadUserData() {
        try {
            const userData = localStorage.getItem('userData');
            if (userData) {
                const user = JSON.parse(userData);
                this.updateUserInterface(user);
            }
        } catch (error) {
            console.error('Erro ao carregar dados do usu√°rio:', error);
        }
    }

    updateUserInterface(user) {
        // Atualizar informa√ß√µes do usu√°rio no sidebar
        const userName = document.getElementById('userName');
        const userRole = document.getElementById('userRole');
        const userMenuName = document.getElementById('userMenuName');
        const userMenuEmail = document.getElementById('userMenuEmail');

        if (userName) userName.textContent = user.name || 'Usu√°rio';
        if (userRole) userRole.textContent = user.role || 'Usu√°rio';
        if (userMenuName) userMenuName.textContent = user.name || 'Usu√°rio';
        if (userMenuEmail) userMenuEmail.textContent = user.email || 'usuario@estoca.ai';
    }

    handleLogout() {
        // Confirmar logout
        if (confirm('Tem certeza que deseja sair do sistema?')) {
            this.performLogout();
        }
    }

    performLogout() {
        try {
            // Limpar dados do usu√°rio
            localStorage.removeItem('userData');
            localStorage.removeItem('rememberedUser');
            
            // Mostrar notifica√ß√£o
            this.showNotification('Logout realizado com sucesso!', 'success');
            
            // Redirecionar para login ap√≥s 1 segundo
            setTimeout(() => {
                window.location.href = 'login.html';
            }, 1000);
        } catch (error) {
            console.error('Erro ao fazer logout:', error);
            this.showNotification('Erro ao fazer logout', 'error');
        }
    }
}

// Inicializar quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', () => {
    window.estocaAI = new EstocaAI();
});

// Fun√ß√µes globais para uso no HTML
window.toggleTheme = function() {
    if (window.estocaAI) {
        window.estocaAI.toggleTheme();
    }
};

window.showNotification = function(message, type) {
    if (window.estocaAI) {
        window.estocaAI.showNotification(message, type);
    }
};

window.exportData = function(type) {
    if (window.estocaAI) {
        window.estocaAI.exportData(type);
    }
};

window.createBackup = function() {
    if (window.estocaAI) {
        window.estocaAI.createBackup();
    }
};

// Fun√ß√µes para o chat IA
window.perguntaRapida = function(pergunta) {
    if (window.estocaAIChat) {
        const input = document.getElementById('chatInput');
        if (input) {
            input.value = pergunta;
            window.estocaAIChat.sendMessage();
        }
    }
};

// Estado do chat
let chatState = {
    isOpen: true,
    isMinimized: false,
    isMaximized: false,
    position: { x: 0, y: 0 },
    isTyping: false,
    lastMessageId: 0,
    messages: []
};

// Mapa de respostas r√°pidas
const quickResponses = {
    'Como posso ver minhas vendas de hoje?': 'Voc√™ pode ver suas vendas de hoje acessando o m√≥dulo de Relat√≥rios > Vendas Di√°rias. L√° voc√™ encontrar√° um resumo completo das vendas do dia atual.',
    'Qual o status do meu estoque?': 'Para verificar o status do seu estoque, v√° at√© o m√≥dulo de Estoque > Vis√£o Geral. L√° voc√™ poder√° ver os itens com baixo estoque, itens em falta e o valor total do seu invent√°rio.',
    'Mostrar relat√≥rio de clientes': 'Voc√™ pode gerar um relat√≥rio completo de clientes acessando Relat√≥rios > Clientes. L√° voc√™ pode filtrar por data, status e outros crit√©rios para obter as informa√ß√µes que precisa.'
};

// Elementos do chat
let chatWindow, chatTitleBar, abrirChatBtn;

// Inicializar elementos do chat
function initChatElements() {
    chatWindow = document.getElementById('chatWindow');
    chatTitleBar = document.getElementById('chatTitleBar');
    abrirChatBtn = document.getElementById('abrirChatBtn');
    
    // Carregar estado salvo
    const savedState = localStorage.getItem('chatState');
    if (savedState) {
        try {
            const parsedState = JSON.parse(savedState);
            chatState = { ...chatState, ...parsedState };
        } catch (e) {
            console.error('Erro ao carregar estado do chat:', e);
        }
    }
    
    // Aplicar estado inicial
    applyChatState();
}

// Aplicar estado do chat
function applyChatState() {
    if (!chatWindow) return;
    
    if (chatState.isOpen) {
        chatWindow.classList.remove('hidden');
        if (abrirChatBtn) abrirChatBtn.style.display = 'none';
        
        if (chatState.isMinimized) {
            chatWindow.classList.add('minimized');
        } else {
            chatWindow.classList.remove('minimized');
        }
        
        if (chatState.isMaximized) {
            chatWindow.classList.add('maximized');
        } else {
            chatWindow.classList.remove('maximized');
        }
        
        // Aplicar posi√ß√£o
        if (chatState.position && chatState.position.x && chatState.position.y) {
            chatWindow.style.left = `${chatState.position.x}px`;
            chatWindow.style.top = `${chatState.position.y}px`;
            chatWindow.style.transform = 'none';
        }
    } else {
        chatWindow.classList.add('hidden');
        if (abrirChatBtn) abrirChatBtn.style.display = 'flex';
    }
    
    // Salvar estado
    saveChatState();
}

// Salvar estado do chat
function saveChatState() {
    localStorage.setItem('chatState', JSON.stringify(chatState));
}

// Abrir o chat
window.abrirChat = function() {
    chatState.isOpen = true;
    chatState.isMinimized = false;
    applyChatState();
    
    // Focar no input de mensagem
    const userInput = document.getElementById('userInput');
    if (userInput) {
        setTimeout(() => userInput.focus(), 100);
    }
};

// Fechar o chat
window.fecharChat = function() {
    chatState.isOpen = false;
    applyChatState();
};

// Minimizar/restaurar chat
window.minimizarChat = function() {
    chatState.isMinimized = !chatState.isMinimized;
    if (chatState.isMinimized) {
        chatState.isMaximized = false; // N√£o pode estar maximizado e minimizado
    }
    applyChatState();
};

// Maximizar/restaurar chat
window.maximizarChat = function() {
    chatState.isMaximized = !chatState.isMaximized;
    if (chatState.isMaximized) {
        chatState.isMinimized = false; // N√£o pode estar minimizado e maximizado
    }
    applyChatState();
};

// Vari√°veis para o drag do chat
let isDragging = false;
let startX, startY, startLeft, startTop;

// Iniciar arrasto
window.startDragSimple = function(e) {
    if (!chatWindow || chatState.isMaximized) return;
    
    isDragging = true;
    startX = e.clientX;
    startY = e.clientY;
    
    const rect = chatWindow.getBoundingClientRect();
    startLeft = rect.left;
    startTop = rect.top;
    
    // Adicionar classe durante o arrasto
    chatWindow.classList.add('dragging');
    
    // Adicionar listeners
    document.addEventListener('mousemove', dragSimple);
    document.addEventListener('mouseup', stopDragSimple);
    
    e.preventDefault();
    e.stopPropagation();
};

// Fun√ß√£o de arrasto
function dragSimple(e) {
    if (!isDragging || !chatWindow) return;
    
    const deltaX = e.clientX - startX;
    const deltaY = e.clientY - startY;
    
    let newLeft = startLeft + deltaX;
    let newTop = startTop + deltaY;
    
    // Limitar dentro da tela
    const maxLeft = window.innerWidth - chatWindow.offsetWidth;
    const maxTop = window.innerHeight - chatWindow.offsetHeight;
    
    newLeft = Math.max(0, Math.min(newLeft, maxLeft));
    newTop = Math.max(0, Math.min(newTop, maxTop));
    
    // Aplicar nova posi√ß√£o
    chatWindow.style.left = `${newLeft}px`;
    chatWindow.style.top = `${newTop}px`;
    chatWindow.style.transform = 'none';
    
    // Atualizar estado
    chatState.position = { x: newLeft, y: newTop };
    chatState.isMaximized = false; // Sai do modo maximizado ao arrastar
    
    e.preventDefault();
    e.stopPropagation();
}

// Parar arrasto
function stopDragSimple() {
    if (!isDragging) return;
    
    isDragging = false;
    chatWindow.classList.remove('dragging');
    
    // Salvar posi√ß√£o
    saveChatState();
    
    // Remover listeners
    document.removeEventListener('mousemove', dragSimple);
    document.removeEventListener('mouseup', stopDragSimple);
}

// Inicializar chat quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    initChatElements();
    
    // Fechar chat ao clicar fora
    document.addEventListener('click', (e) => {
        if (chatState.isOpen && !chatWindow.contains(e.target) && e.target !== abrirChatBtn) {
            chatState.isMinimized = true;
            applyChatState();
        }
    });
    
    // Fechar menu de usu√°rio ao clicar fora
    document.addEventListener('click', (e) => {
        const userMenu = document.querySelector('.user-menu');
        const userAvatar = document.querySelector('.user-avatar');
        
        if (userMenu && userAvatar && !userMenu.contains(e.target) && !userAvatar.contains(e.target)) {
            userMenu.classList.remove('show');
        }
    });
});

// Fun√ß√£o para enviar mensagem no chat
window.enviarMensagem = function() {
    const userInput = document.getElementById('userInput');
    if (!userInput || !userInput.value.trim()) return;
    
    const message = userInput.value.trim();
    
    // Adicionar mensagem do usu√°rio
    addMessageToChat(message, 'user');
    
    // Limpar input e ajustar altura
    userInput.value = '';
    adjustTextareaHeight(userInput);
    
    // Mostrar indicador de digita√ß√£o
    showTypingIndicator();
    
    // Simular tempo de resposta da IA (entre 0.5s e 1.5s)
    const typingTime = 500 + Math.random() * 1000;
    
    setTimeout(() => {
        // Esconder indicador de digita√ß√£o
        hideTypingIndicator();
        
        // Gerar e exibir resposta
        const response = generateAIResponse(message);
        addMessageToChat(response, 'ai');
        
        // Rolar para o final ap√≥s a resposta
        setTimeout(scrollToBottom, 100);
        
    }, typingTime);
};

// Fun√ß√£o para lidar com perguntas r√°pidas (a√ß√µes r√°pidas)
function perguntaRapida(pergunta) {
    const userInput = document.getElementById('userInput');
    if (userInput) {
        userInput.value = pergunta;
        enviarMensagem();
    }
}

// Fun√ß√£o para ajustar a altura do textarea conforme o conte√∫do
function adjustTextareaHeight(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
}

// Fun√ß√£o para enviar mensagem ao pressionar Enter (sem Shift)
function handleKeyDown(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        enviarMensagem();
    }
}

// Fun√ß√£o para rolar suavemente para o final das mensagens
function smoothScrollToBottom(element) {
    element.scrollTo({
        top: element.scrollHeight,
        behavior: 'smooth'
    });
}

// Inicializar o chat quando o documento estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    // Configurar o evento de tecla no input de mensagem
    const userInput = document.getElementById('userInput');
    if (userInput) {
        userInput.addEventListener('keydown', handleKeyDown);
        userInput.addEventListener('input', function() {
            adjustTextareaHeight(this);
        });
    }
    
    // Configurar data/hora da mensagem de boas-vindas
    const welcomeTime = document.getElementById('welcomeTime');
    if (welcomeTime) {
        welcomeTime.textContent = formatMessageTime();
    }
});

// Fun√ß√£o para gerar um ID √∫nico para mensagens
function generateMessageId() {
    return 'msg-' + Date.now() + '-' + Math.floor(Math.random() * 1000);
}

// Fun√ß√£o para formatar a data/hora da mensagem
function formatMessageTime(date = new Date()) {
    return new Intl.DateTimeFormat('pt-BR', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
    }).format(date);
}

// Fun√ß√£o para mostrar o indicador de digita√ß√£o
function showTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.style.display = 'flex';
        chatState.isTyping = true;
        scrollToBottom();
    }
}

// Fun√ß√£o para esconder o indicador de digita√ß√£o
function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.style.display = 'none';
        chatState.isTyping = false;
    }
}

// Fun√ß√£o para rolar para a √∫ltima mensagem
function scrollToBottom() {
    const messagesContainer = document.getElementById('chatMessages');
    if (messagesContainer) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
}

// Fun√ß√£o para adicionar mensagem ao chat
function addMessageToChat(message, sender, messageId = null) {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return null;
    
    const messageIdToUse = messageId || generateMessageId();
    const messageTime = formatMessageTime();
    
    // Criar elementos da mensagem
    const messageElement = document.createElement('div');
    messageElement.className = `message ${sender}-message`;
    messageElement.id = messageIdToUse;
    
    // Adicionar avatar do remetente
    if (sender === 'ai') {
        const senderElement = document.createElement('div');
        senderElement.className = 'message-sender';
        senderElement.innerHTML = '<i class="fas fa-robot"></i>';
        messageElement.appendChild(senderElement);
    } else {
        const senderElement = document.createElement('div');
        senderElement.className = 'message-sender';
        senderElement.innerHTML = '<i class="fas fa-user"></i>';
        messageElement.appendChild(senderElement);
    }
    
    // Container do conte√∫do da mensagem
    const contentWrapper = document.createElement('div');
    contentWrapper.className = 'message-content-wrapper';
    
    // Conte√∫do da mensagem
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    messageContent.textContent = message;
    
    // Rodap√© da mensagem (hora e status)
    const messageFooter = document.createElement('div');
    messageFooter.className = 'message-time';
    
    const timeElement = document.createElement('span');
    timeElement.innerHTML = `<i class="far fa-clock"></i> ${messageTime}`;
    
    messageFooter.appendChild(timeElement);
    
    // Adicionar status apenas para mensagens do usu√°rio
    if (sender === 'user') {
        const statusElement = document.createElement('span');
        statusElement.className = 'message-status delivered';
        statusElement.innerHTML = '<i class="fas fa-check-double"></i>';
        messageFooter.appendChild(statusElement);
    }
    
    // Montar a estrutura
    contentWrapper.appendChild(messageContent);
    contentWrapper.appendChild(messageFooter);
    messageElement.appendChild(contentWrapper);
    
    // Adicionar ao container de mensagens
    messagesContainer.appendChild(messageElement);
    
    // Rolar para a mensagem
    scrollToBottom();
    
    // Adicionar ao hist√≥rico de mensagens
    chatState.messages.push({
        id: messageIdToUse,
        content: message,
        sender: sender,
        timestamp: new Date().toISOString(),
        status: sender === 'user' ? 'delivered' : 'sent'
    });
    
    return messageIdToUse;
}

// Gerar resposta da IA (melhorada com respostas contextuais)
function generateAIResponse(message) {
    // Verificar se h√° uma resposta r√°pida pr√©-definida
    const quickResponse = quickResponses[message];
    if (quickResponse) {
        return quickResponse;
    }
    
    // Converter mensagem para min√∫sculas para compara√ß√£o
    const lowerMessage = message.toLowerCase();
    
    // Respostas baseadas em palavras-chave
    if (lowerMessage.includes('ol√°') || lowerMessage.includes('oi') || lowerMessage.includes('ola')) {
        return "Ol√°! Sou o assistente do Estoca.AI. Como posso te ajudar hoje com seu neg√≥cio?";
    } else if (lowerMessage.includes('obrigado') || lowerMessage.includes('obrigada')) {
        return "De nada! Fico feliz em ajudar. Se precisar de mais alguma coisa, √© s√≥ chamar!";
    } else if (lowerMessage.includes('ajuda') || lowerMessage.includes('como usar')) {
        return "Posso te ajudar com:\n‚Ä¢ Relat√≥rios de vendas\n‚Ä¢ Controle de estoque\n‚Ä¢ Gest√£o de clientes\n‚Ä¢ An√°lises financeiras\n\nSobre qual desses assuntos voc√™ gostaria de saber mais?";
    } else if (lowerMessage.includes('venda') || lowerMessage.includes('vendas')) {
        return "Para acessar informa√ß√µes sobre vendas, v√° at√© o menu 'Vendas' no painel principal. L√° voc√™ encontrar√° relat√≥rios, hist√≥rico e ferramentas para gerenciar suas vendas.";
    } else if (lowerMessage.includes('estoque') || lowerMessage.includes('produto')) {
        return "No m√≥dulo de Estoque voc√™ pode:\n‚Ä¢ Verificar n√≠veis de estoque\n‚Ä¢ Cadastrar novos produtos\n‚Ä¢ Ajustar invent√°rio\n‚Ä¢ Gerar relat√≥rios\n\nGostaria de acessar alguma dessas fun√ß√µes?";
    } else if (lowerMessage.includes('cliente') || lowerMessage.includes('clientes')) {
        return "No cadastro de clientes voc√™ pode:\n‚Ä¢ Adicionar novos clientes\n‚Ä¢ Visualizar hist√≥rico de compras\n‚Ä¢ Enviar promo√ß√µes\n‚Ä¢ Gerenciar fidelidade\n\nPosso te ajudar com alguma dessas op√ß√µes?";
    } else if (lowerMessage.includes('relat√≥rio') || lowerMessage.includes('relatorio')) {
        return "Temos v√°rios tipos de relat√≥rios dispon√≠veis:\n‚Ä¢ Vendas por per√≠odo\n‚Ä¢ Produtos mais vendidos\n‚Ä¢ Desempenho de vendedores\n‚Ä¢ Fluxo de caixa\n\nSobre qual voc√™ gostaria de gerar um relat√≥rio?";
    }
    
    // Se n√£o reconhecer o contexto, usar uma resposta gen√©rica
    const genericResponses = [
        "Entendi sua solicita√ß√£o. Vou verificar essas informa√ß√µes para voc√™.",
        "√ìtima pergunta! Deixe-me buscar os dados mais recentes sobre isso.",
        "Posso ajudar com isso. Um momento enquanto verifico as informa√ß√µes.",
        "Vou analisar e j√° te retorno com os detalhes.",
        "Vou verificar como posso te ajudar com isso."
    ];
    
    return genericResponses[Math.floor(Math.random() * genericResponses.length)];
}

// Formatar hora
function formatTime(date) {
    return date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
}

// Fun√ß√£o para perguntas r√°pidas
window.perguntaRapida = function(pergunta) {
    const userInput = document.getElementById('userInput');
    if (userInput) {
        userInput.value = pergunta;
        enviarMensagem();
    }
};

console.log('üì¶ Estoca.AI - Sistema de Gest√£o Inteligente carregado!');

/**
 * Fun√ß√£o para lidar com a√ß√µes r√°pidas nos bot√µes do chat
 * @param {string} tipo - Tipo de a√ß√£o (vendas, estoque, clientes, financeiro)
 * @param {string} pergunta - Pergunta a ser enviada ao chat
 */
function acaoRapida(tipo, pergunta) {
    // Enviar a pergunta ao chat
    if (window.perguntaRapida) {
        window.perguntaRapida(pergunta);
    }
    
    // Executar a√ß√µes espec√≠ficas com base no tipo
    switch(tipo) {
        case 'vendas':
            // Atualizar gr√°fico de vendas se a fun√ß√£o existir
            if (typeof gerarGraficoVendas === 'function') {
                gerarGraficoVendas();
            }
            // Atualizar relat√≥rio de vendas se a fun√ß√£o existir
            if (typeof gerarRelatorioVendas === 'function') {
                gerarRelatorioVendas();
            }
            break;
            
        case 'estoque':
            // Adicionar l√≥gica para atualizar informa√ß√µes de estoque
            if (typeof atualizarEstoque === 'function') {
                atualizarEstoque();
            }
            break;
            
        case 'clientes':
            // Adicionar l√≥gica para atualizar informa√ß√µes de clientes
            if (typeof atualizarClientes === 'function') {
                atualizarClientes();
            }
            break;
            
        case 'financeiro':
            // Adicionar l√≥gica para atualizar informa√ß√µes financeiras
            if (typeof atualizarFinanceiro === 'function') {
                atualizarFinanceiro();
            }
            break;
    }
    
    // Rolar para o topo do dashboard para visualizar as atualiza√ß√µes
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Fun√ß√£o para adicionar mensagem ao chat
function adicionarMensagem(texto, tipo) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${tipo}-message`;
    
    // Adiciona a mensagem ao DOM primeiro para que possamos anim√°-la
    messageDiv.innerHTML = `
        <div class="message-content">
            <div class="message-text">${formatarTexto(texto)}</div>
            <div class="message-time">${formatarHora()}</div>
        </div>
    `;
    
    // Remove a mensagem de boas-vindas se for a primeira mensagem
    const welcomeMessage = chatMessages.querySelector('.welcome-message');
    if (welcomeMessage && document.querySelectorAll('.message').length === 0) {
        welcomeMessage.style.animation = 'fadeOut 0.3s forwards';
        setTimeout(() => welcomeMessage.remove(), 300);
    }
    
    chatMessages.appendChild(messageDiv);
    
    // Rola para a nova mensagem com anima√ß√£o suave
    setTimeout(() => {
        messageDiv.style.opacity = '1';
        messageDiv.style.transform = 'translateY(0)';
        chatMessages.scrollTo({
            top: chatMessages.scrollHeight,
            behavior: 'smooth'
        });
    }, 50);
    
    return messageDiv;
}

// Fun√ß√£o para formatar texto com links e quebras de linha
function formatarTexto(texto) {
    // Converte URLs em links clic√°veis
    texto = texto.replace(
        /(https?:\/\/[^\s]+)/g, 
        '<a href="$1" target="_blank" class="message-link">$1</a>'
    );
    
    // Converte quebras de linha em <br>
    return texto.replace(/\n/g, '<br>');
}

// Fun√ß√£o para formatar a hora atual
function formatarHora() {
    return new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

// Fun√ß√£o para enviar mensagem
function enviarMensagem() {
    const userInput = document.getElementById('userInput');
    const message = userInput.value.trim();
    
    if (message === '') return;
    
    // Adiciona a mensagem do usu√°rio
    adicionarMensagem(message, 'user');
    
    // Limpa o input e ajusta a altura
    userInput.value = '';
    userInput.style.height = 'auto';
    
    // Mostra o indicador de digita√ß√£o
    mostrarIndicadorDigitacao();
    
    // Simula processamento e resposta do assistente
    setTimeout(() => {
        esconderIndicadorDigitacao();
        const resposta = gerarRespostaIA(message);
        adicionarMensagem(resposta, 'assistant');
    }, 1500);
}

// Fun√ß√£o para mostrar indicador de digita√ß√£o
function mostrarIndicadorDigitacao() {
    const chatMessages = document.getElementById('chatMessages');
    let typingIndicator = chatMessages.querySelector('.typing-indicator');
    
    if (!typingIndicator) {
        typingIndicator = document.createElement('div');
        typingIndicator.className = 'typing-indicator';
        typingIndicator.innerHTML = `
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        `;
        chatMessages.appendChild(typingIndicator);
    }
    
    // Rola para o indicador de digita√ß√£o
    chatMessages.scrollTo({
        top: chatMessages.scrollHeight,
        behavior: 'smooth'
    });
}

// Fun√ß√£o para esconder indicador de digita√ß√£o
function esconderIndicadorDigitacao() {
    const typingIndicator = document.querySelector('.typing-indicator');
    if (typingIndicator) {
        typingIndicator.style.opacity = '0';
        setTimeout(() => typingIndicator.remove(), 300);
    }
}

// Fun√ß√£o para gerar resposta da IA
function gerarRespostaIA(mensagem) {
    // Converte a mensagem para min√∫sculas para facilitar a correspond√™ncia
    const msg = mensagem.toLowerCase();
    
    // Respostas baseadas em palavras-chave
    if (msg.includes('ol√°') || msg.includes('oi') || msg.includes('ola') || msg.includes('eae')) {
        return "Ol√°! Como posso te ajudar hoje no Estoca.AI? Estou aqui para auxiliar com gest√£o de estoque, vendas e mais!";
    } else if (msg.includes('ajuda') || msg.includes('comandos') || msg.includes('o que voc√™ faz')) {
        return "Posso te ajudar com:\n‚Ä¢ Consultas de estoque\n‚Ä¢ Relat√≥rios de vendas\n‚Ä¢ An√°lises financeiras\n‚Ä¢ Gest√£o de clientes\n\n√â s√≥ me perguntar o que voc√™ precisa!";
    } else if (msg.includes('estoque') || msg.includes('produtos')) {
        return "üì¶ Aqui est√° um resumo do seu estoque:\n‚Ä¢ 1.245 itens em estoque\n‚Ä¢ 32 itens com baixo estoque\n‚Ä¢ 5 itens vencidos\n\nDeseja ver mais detalhes sobre algum produto espec√≠fico?";
    } else if (msg.includes('vendas') || msg.includes('venda')) {
        return "üí∞ Relat√≥rio de Vendas (√∫ltimos 30 dias):\n‚Ä¢ Total: R$ 124.567,89\n‚Ä¢ Vendas totais: 342\n‚Ä¢ Ticket m√©dio: R$ 364,23\n\nQuer ver mais detalhes ou comparar com per√≠odos anteriores?";
    } else if (msg.includes('cliente') || msg.includes('clientes')) {
        return "üë• Seus clientes:\n‚Ä¢ Total: 1.845 clientes\n‚Ä¢ Novos este m√™s: 124\n‚Ä¢ Taxa de reten√ß√£o: 87%\n\nPosso listar os principais clientes ou buscar por nome/CPF.";
    } else if (msg.includes('obrigado') || msg.includes('valeu') || msg.includes('agrade√ßo')) {
        const agradecimentos = ["De nada! Estou aqui para ajudar.", "Por nada! Precisa de mais alguma coisa?", "Disponha! Estou √† disposi√ß√£o para ajudar."];
        return agradecimentos[Math.floor(Math.random() * agradecimentos.length)];
    } else if (msg.includes('horas') || msg.includes('hora') || msg.includes('hor√°rio')) {
        return `Agora s√£o ${new Date().toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'})}.`;
    } else if (msg.includes('data') || msg.includes('dia') || msg.includes('hoje')) {
        return `Hoje √© ${new Date().toLocaleDateString('pt-BR', {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'})}.`;
    } else if (msg.includes('contato') || msg.includes('suporte') || msg.includes('ajuda')) {
        return "üìû Entre em contato com nosso suporte:\n‚Ä¢ E-mail: suporte@estocaai.com\n‚Ä¢ Telefone: (48) 1234-5678\n‚Ä¢ Hor√°rio: Seg-Sex, 8h √†s 18h";
    } else if (msg.includes('erro') || msg.includes('problema') || msg.includes('n√£o funciona')) {
        return "Lamento pelo inconveniente. Para ajudar a resolver seu problema, por favor, descreva o que estava tentando fazer quando o erro ocorreu. Assim que poss√≠vel, nossa equipe de suporte ir√° te ajudar!";
    } else if (msg.includes('tutorial') || msg.includes('como usar') || msg.includes('como funciona')) {
        return "üîç Aqui est√° um guia r√°pido para come√ßar:\n1. Use o menu lateral para acessar as principais funcionalidades\n2. Fa√ßa buscas r√°pidas usando a barra de pesquisa\n3. Utilize os atalhos para a√ß√µes frequentes\n4. Personalize seu painel com os widgets mais importantes para voc√™\n\nPosso te mostrar um tour guiado pelo sistema. √â s√≥ pedir!";
    } else if (msg.includes('configura√ß√£o') || msg.includes('configurar') || msg.includes('prefer√™ncias')) {
        return "‚öôÔ∏è Configura√ß√µes dispon√≠veis:\n‚Ä¢ Perfil do usu√°rio\n‚Ä¢ Prefer√™ncias de notifica√ß√£o\n‚Ä¢ Tema (claro/escuro)\n‚Ä¢ Idioma\n‚Ä¢ Integra√ß√µes\n\nSobre qual configura√ß√£o voc√™ gostaria de saber mais?";
    } else if (msg.includes('relat√≥rio') || msg.includes('relatorio') || msg.includes('relat√≥rios')) {
        return "üìä Tipos de relat√≥rios dispon√≠veis:\n‚Ä¢ Vendas por per√≠odo\n‚Ä¢ Produtos mais vendidos\n‚Ä¢ Desempenho de vendedores\n‚Ä¢ Fluxo de caixa\n‚Ä¢ Contas a pagar/receber\n\nQual relat√≥rio voc√™ gostaria de visualizar?";
    } else if (msg.includes('sair') || msg.includes('encerrar') || msg.includes('at√© mais')) {
        return "At√© mais! Se precisar de ajuda, √© s√≥ chamar. Tenha um √≥timo dia! üòä";
    } else {
        // Se n√£o reconhecer a pergunta, tente fornecer uma resposta gen√©rica
        const respostas = [
            "Desculpe, n√£o entendi completamente. Poderia reformular sua pergunta?",
            "Interessante! No momento, posso ajudar com informa√ß√µes sobre estoque, vendas, clientes e relat√≥rios. Sobre qual desses assuntos voc√™ gostaria de saber mais?",
            "Hmm, n√£o tenho certeza se entendi. Voc√™ poderia tentar de outra forma?",
            "Ainda estou aprendendo! Por enquanto, consigo ajudar com informa√ß√µes sobre o sistema de gest√£o. Tente me fazer uma pergunta sobre estoque, vendas ou clientes.",
            "Vou verificar isso para voc√™. Enquanto isso, posso te ajudar com relat√≥rios, consultas de estoque ou an√°lise de vendas?"
        ];
        return respostas[Math.floor(Math.random() * respostas.length)];
    }
}

// Fun√ß√£o para ajustar a altura do textarea
function setupTextareaAutoResize() {
    document.querySelectorAll('.message-input').forEach(textarea => {
        const adjustHeight = function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 150) + 'px';
            
            // Atualiza a posi√ß√£o do bot√£o de enviar
            const sendBtn = this.closest('.input-wrapper').querySelector('.send-btn');
            if (this.value.trim() !== '') {
                sendBtn.style.opacity = '1';
                sendBtn.style.transform = 'scale(1)';
                sendBtn.style.pointerEvents = 'auto';
            } else {
                sendBtn.style.opacity = '0.5';
                sendBtn.style.transform = 'scale(0.9)';
                sendBtn.style.pointerEvents = 'none';
            }
            
            // Rola para o final das mensagens quando o usu√°rio digita
            const chatMessages = document.getElementById('chatMessages');
            if (chatMessages) {
                smoothScrollToBottom(chatMessages);
            }
        };
        
        // Remove event listeners antigos para evitar duplica√ß√£o
        const newTextarea = textarea.cloneNode(true);
        textarea.parentNode.replaceChild(newTextarea, textarea);
        
        newTextarea.addEventListener('input', adjustHeight);
        newTextarea.addEventListener('focus', () => {
            newTextarea.parentElement.classList.add('focused');
        });
        
        newTextarea.addEventListener('blur', () => {
            newTextarea.parentElement.classList.remove('focused');
        });
        
        // Ajusta a altura inicial
        setTimeout(() => adjustHeight.call(newTextarea), 100);
        
        return newTextarea;
    });
}

// Configura o textarea quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    setupTextareaAutoResize();
    
    // Foca no input quando o chat √© aberto
    const userInput = document.getElementById('userInput');
    if (userInput) {
        setTimeout(() => userInput.focus(), 500);
    }
    
    // Adiciona atalho de teclado (Ctrl + /) para focar no chat
    document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === '/') {
            e.preventDefault();
            const input = document.getElementById('userInput');
            if (input) {
                input.focus();
            }
        }
    });
});

// Fun√ß√£o para lidar com o pressionar de teclas no input
function handleKeyDown(event) {
    // Se for Enter sem Shift, envia a mensagem
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        enviarMensagem();
        return;
    }
    
    // Se for a tecla /, foca no input
    if (event.key === '/' && !event.ctrlKey && !event.metaKey) {
        event.preventDefault();
        const input = document.getElementById('userInput');
        if (input) {
            input.focus();
        }
        return;
    }
    
    // Se for Escape, remove o foco do input
    if (event.key === 'Escape') {
        const input = document.getElementById('userInput');
        if (input && input === document.activeElement) {
            input.blur();
        }
        return;
    }
    
    // Se for Ctrl + K, foca no input e limpa
    if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'k') {
        event.preventDefault();
        const input = document.getElementById('userInput');
        if (input) {
            input.value = '';
            input.focus();
            // Dispara o evento de input para ajustar a altura
            input.dispatchEvent(new Event('input'));
        }
        return;
    }
}

// Fun√ß√£o para rolar suavemente para o final das mensagens
function smoothScrollToBottom(element) {
    element.scrollTo({
        top: element.scrollHeight,
        behavior: 'smooth'
    });
}

// Fun√ß√£o para perguntas r√°pidas
function perguntaRapida(pergunta) {
    const userInput = document.getElementById('userInput');
    userInput.value = pergunta;
    
    // Dispara o evento de input para ajustar a altura
    const event = new Event('input', {
        bubbles: true,
        cancelable: true,
    });
    userInput.dispatchEvent(event);
    
    // Adiciona uma pequena anima√ß√£o ao clicar em uma pergunta r√°pida
    const quickAction = event.target.closest('.quick-action');
    if (quickAction) {
        quickAction.style.transform = 'scale(0.98)';
        setTimeout(() => {
            quickAction.style.transform = 'translateY(-3px)';
        }, 100);
    }
    
    // Envia a mensagem ap√≥s uma pequena pausa para a anima√ß√£o
    setTimeout(() => {
        enviarMensagem();
    }, 200);
}